RDBMS
Problems ::
	Data Redundancy :: Same
				:: Write a new column
	Attempt to capture new data
			:: Same/Multiple
				:: Write a new Column
	Memory Management

Relations:
	1:1
		All in one table
	1:n
		Each into different table

Learning:
	1. Declaring a column as FK
	2. Ref
	3. Data Sanity :: Proof tables are linked
	4. Master/Slave :: Parent/Child
	5. Static and Dynamic
	   (drop-down, lists)

Observations:
	1. PK :: new and not-null
	2. FK :: repeated and need not be null
	3. Necessity of PK in slave table

===================================================================

1. Requirement Analysis
2. Writing Relations
3. Tables
	=> Number of columns
	=> Data-type of columns
	=> Restrictions :: Constraints - like PK and FK

===================================================================

Capturing Customer Details as per Image1
1. Customer :: 	Customer_ID	:: INTEGER(4)  :: autogenerated => Sequences
		Customer_Name	:: VARCHAR(46) :: 
	       	Customer_Age	:: INTEGER(3)
               	Customer_Pwd	:: VARCHAR(46)

2. Phone_Type :: Phone_Type_ID	:: VARCHAR(5)	:: hard-coded
	      :: Phone_Type	:: VARCHAR(16)	:: hard-coded

3. Phone_Number	:: Phone_ID	:: INTEGER(4)	:: autogenerated => Sequences
		:: Phone_Number	:: INTEGER(10)
		:: Customer_ID	:: INTEGER(4)
		:: Phone_Type_ID	:: VARCHAR(5)

4. Email_Type :: Email_Type_ID	:: VARCHAR(5)	:: hard-coded
	      :: Email_Type	:: VARCHAR(30)	:: hard-coded

3. Email_ID	:: Email_ID_ID	:: INTEGER(4)	:: autogenerated => Sequences
		:: Email_ID	:: INTEGER(10)
		:: Customer_ID	:: INTEGER(4)
		:: Email_Type_ID	:: VARCHAR(5)

=============================================================================

My-SQL Query::
Step 1:: Connect to RDBMS
=> Client Application :: localhost:3306/MySQL80

Step 2:: User Authentication
=> Admin account :: Root

Step 3::
Inbuilt Schemas :: System, Sakila

===================================================================

-- CRUD operations
-- CREATE Operation
-- create user-defined schema
CREATE SCHEMA ICICI;

-- READ operation
-- start using the schema to create tables :: DB objects
USE ICICI;

-- CRUD operations wrt DB objects
-- Tables

-- CREATE operation
CREATE TABLE EMPLOYEE(
	EMPLOYEE_ID 	INTEGER(4),
    EMPLOYEE_NAME	VARCHAR(46),
    EMPLOYEE_SALARY INTEGER(6)
);

-- read operation
DESCRIBE EMPLOYEE;
DESC EMPLOYEE;

-- UPDATE operation
-- a. renaming a table
RENAME TABLE EMPLOYEES
TO EMPLOYEE;

-- b. adding a column
ALTER TABLE EMPLOYEE
ADD COLUMN
EMPLOYEE_PASSWORD VARCHAR(16); -- column signature

-- c. Renaming a column
ALTER TABLE EMPLOYEE
RENAME COLUMN EMPLOYEE_PASSWORD
TO EMPLOYEE_PWD;

-- d. change data-type
-- the column MUST be empty
ALTER TABLE EMPLOYEE
MODIFY COLUMN
EMPLOYEE_PWD INTEGER;

-- e. size of the column
-- resizing a column :: cannot be decreaqsed below the maximum length of existing data
ALTER TABLE EMPLOYEE
MODIFY COLUMN
EMPLOYEE_NAME VARCHAR(10); -- column signature

-- f. deleting a column
ALTER TABLE EMPLOYEE
DROP COLUMN EMPLOYEE_PWD;

-- DELETE operation
DROP TABLE EMPLOYEE;


====================================================================
MS-SQL Query::
Step 1:: Connect to RDBMS
=> Client Application :: localhost:/

Step 2:: User Authentication
=> Admin account :: Windows Authentication

Step 3::
Inbuilt Database :: Master, Model
			=> tables, constraints

Step 4:: 

================================================

Msg 3702, Level 16, State 4, Line 8
Cannot drop database "HDFC" because. it is currently in use

================================================

ERROR_CODE	MESSAGE_TO_USER
2647		ENTER VALID PRIMARY KEY
547		ENTER PROPER EMPLOYEE ID

Function name :: insertQuery
	inputs :: id, phone_number, emp_id
	@result int = 1
	try
		if successful
		return @result
	catch
		if unsuccessful
		return error_code

DECLARE @value = insertQuery(9,1223,200)
if(@value=1)
	PRINT ('1 ROW INSERTED')
ELSE
   SELECT MESSAGE_TO_USER FROM ERROR_TABLE WHERE ERROR_CODE = @value

=======================================================================

101	10000
102	2000
103	4000
104	7000
105	7000
106	6000
107	7001
108	8000

==================================================================

-- stored procedure parameters
CREATE PROCEDURE USP_OPTIONAL_PARAMETER_DEMO(
	-- input parameter
	@empId INTEGER,
	-- optional parameters
	@empSalary INTEGER = 7000
)
AS
	BEGIN
		UPDATE EMPLOYEE
		SET EMPLOYEE_SALARY=@empSalary
		WHERE EMPLOYEE_ID=@empId
	END
GO

==================================================================

101	GANESH	DEV	1234
101	GANESH	DEV	1243
102	KEERTHI	DEV	1324
104	RAKESH	DEV	1432
104	RAKESH	DEV	2134
105	RAMA	HR	1423
106	RIYA	QA	NULL
108	RAJESH	HR	1342

heap

-- before creating index
5	GANESH    
3	KEERTHI   
7	MERLYN    
10	JAMSHEER  

-- after creating index
3	KEERTHI   
5	GANESH    
7	MERLYN    
10	JAMSHEER  






